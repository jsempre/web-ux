Create a new project in Glitch and place the following button element in the body of the index.html file:
<div>
  <button class="sampleJS">
    Run Sample Javascript
  </button>
</div>
This will give us a way to test the Javascript we write.

Functions
Functions are reusable blocks of code that you can write once and run again and again, saving the need to keep repeating code all the time. This is really useful. There are a number of ways to define functions, but for now we'll concentrate on one simple type. Here we have defined a function by using the keyword function, followed by a name, with parentheses put after it. After that we put two curly braces ({ }). Inside the curly braces goes all the code that we want to run whenever we call the function.
When we want to run the code, we type the name of the function followed by the parentheses.

Create the following function in the script.js file in Glitch
function runSampleJS(){
  alert('You clicked a button');
}
Add the following two lines to end of the same script.js file so that our function is called when the button we created above is clicked.
const runJS = document.querySelector('.sampleJS'); // This line is an easy way to refer to html elements using an identifying class, we won't get into the mechanics during this intro course
runJS.addEventListener('click', runSampleJS); // We will explain events in more detail below, for now just note we are defining that our function 'runSampleJS' will run when our button is clicked.

Now view your site, click the button and you should see the alert text pop up.

Variables
Variables are basically containers for values (such as numbers, or strings of text). You create a variable with the keyword let (or var) followed by a name for your variable. 
Constants are used to store values that are immutable or can't be changed and are created with the keyword const.
Edit your function to use a variable using the following example:
function runSampleJS(){
  let message = 'You clicked a button';
  alert(message);
}

Operators
JavaScript operators allow us to perform tests, do math, join strings together, and other such things.

If you haven't already done so, save your code, refresh the page in your browser, and open the developer tools JavaScript console. Then we can try typing in the examples shown below — type in each one from the "Example" columns exactly as shown, pressing Return/Enter after each one, and see what results they return.

First let's look at arithmetic operators, for example:
Operator	Name	Example
+	Addition	6 + 9
-	Subtraction	20 - 15
*	Multiplication	3 * 7
/	Division	10 / 5

You can also use the + operator to join text strings together (in programming, this is called concatenation). Try entering the following lines, one at a time:

let name = 'Bingo';
name;
let hello = ' says hello!';
hello;
let greeting = name + hello;
greeting;

There are also some shortcut operators available, called augmented assignment operators. For example, if you want to simply add a new text string to an existing one and return the result, you could do this:

name += ' says hello!';

When we are running true/false tests (for example inside conditionals — see below) we use comparison operators. For example:

Operator	Name	Example
===	Strict equality (is it exactly the same?)	
5 === 2 + 4 // false
'Chris' === 'Bob' // false
5 === 2 + 3 // true
2 === '2' // false; number versus string
!==	Non-equality (is it not the same?)	
5 !== 2 + 4 // true
'Chris' !== 'Bob' // true
5 !== 2 + 3 // false
2 !== '2' // true; number versus string
<	Less than	
6 < 10 // true
20 < 10 // false
>	Greater than	
6 > 10 // false
20 > 10  // true

Conditionals
Events
